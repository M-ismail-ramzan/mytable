{"version":3,"sources":["Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","starting","Info","eventName","Email","Fee","StudentName","Contact","input","isture","gettingInput","e","setState","objectSpread","state","defineProperty","target","name","value","checkingEmpty","console","log","error","undefined","addRecord","event","preventDefault","alert","dataInfo","push","deleteall","reset","idx","datainput","splice","_this2","data","map","hero","react_default","a","createElement","key","id","className","onClick","type","placeholder","onChange","Component","App","Table_Table_Table","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06265341.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./Table.css\";\r\n\r\nexport default class Table extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = this.starting();\r\n    }\r\n\r\n    starting=()=>({\r\n            Info:[\r\n                {eventName: '',Email : '',Fee : '',StudentName  : '',Contact : ''}\r\n            ],\r\n            input:[],\r\n            isture: false\r\n})\r\n\r\n    \r\n    gettingInput=(e)=>{\r\n        this.setState({\r\n            Info: {\r\n                ...this.state.Info,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        })\r\n    }\r\n    checkingEmpty=()=>{\r\n        console.log(this.state.Info);\r\n        let error=false;\r\n        if(this.state.Info.eventName === undefined){\r\n            return(\r\n                error=true       )}\r\n            if(this.state.Info.Email === undefined){\r\n                return(\r\n                    error=true              )}\r\n                if(this.state.Info.Fee === undefined){\r\n                    return(\r\n                        error=true                )}\r\n                    if(this.state.Info.Contact === undefined){\r\n                        return(\r\n                            error=true                      )}\r\n                        if(this.state.Info.StudentName === undefined){\r\n                            return(\r\n                                    error=true\r\n                            )}\r\n                            return error;\r\n        }\r\n\r\n            \r\n        addRecord=(event)=>{\r\n            event.preventDefault();\r\n            const error=this.checkingEmpty();\r\n            if(error){\r\n                alert(\"Please Write all the data\");\r\n            }else\r\n            {\r\n            let dataInfo=this.state.Info;\r\n            this.state.input.push(dataInfo);\r\n            \r\n            this.setState({\r\n                isture:true,\r\n                Info : '',\r\n                eventName:'',\r\n                Fee :'',\r\n                Contact: '',\r\n                StudentName:'',\r\n                Email : ''\r\n\r\n            })\r\n        }\r\n        }\r\n\r\n        deleteall=()=>{\r\n            this.setState(\r\n                this.starting()\r\n            )\r\n        }\r\n    reset=(e,idx)=>{\r\n        let datainput= this.state.input\r\n        datainput.splice(idx,1)\r\n        this.setState({\r\n            input : datainput\r\n        }\r\n        )\r\n        }\r\n    \r\n  render() {\r\n        let data=null;\r\n        if(this.state.isture){\r\n            data=this.state.input.map((hero,idx)=>{\r\n                return(\r\n                    <div>\r\n                    <table key={hero.id} className=\"tableSetting2\">\r\n                        <tbody>\r\n                            <tr>\r\n                        <td key={hero.id}> {hero.eventName}</td>\r\n                        <td key={hero.id}> {hero.Email}</td>\r\n                        <td key={hero.id}> {hero.Fee}</td>\r\n                        <td key={hero.id}> {hero.Contact}</td>\r\n                        <td key={hero.id}> {hero.StudentName}</td>\r\n                        <td><button onClick={e=>this.reset(e,idx)} className='btn-delete'>Delete</button></td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    \r\n                    </div>\r\n                );\r\n            })\r\n        }\r\n        console.log(this.state.Info)\r\n        console.log(this.state.input)\r\n    return (\r\n      <div>\r\n          <h1 className=\"textHeading\">Enter Data to Add</h1>\r\n        <div className=\"responsive\">\r\n        <table className=\"inputTop\">\r\n                <tbody>\r\n                    <tr>\r\n                    <th><input type=\"text\" placeholder=\"   Event Name\" name=\"eventName\" onChange={this.gettingInput} value={this.state.eventName}></input></th>\r\n                    <th><input type=\"text\" placeholder=\"   Email Id\" name=\"Email\" onChange={this.gettingInput} value={this.state.Email}></input></th>\r\n                    <th><input type=\"text\" placeholder=\"   Registration Fee\" name=\"Fee\" onChange={this.gettingInput} value={this.state.Fee}></input></th>\r\n                    <th><input type=\"text\" placeholder=\"   Student Name\" name=\"StudentName\" onChange={this.gettingInput} value={this.state.StudentName}></input></th>\r\n                    <th><input type=\"text\" placeholder=\"   Contact Information\" name=\"Contact\" onChange={this.gettingInput} value={this.state.Contact}></input></th>\r\n                    </tr>    \r\n                </tbody>\r\n            </table>\r\n            <button onClick={this.addRecord} className=\"btn-table\">Add Record</button>\r\n            <table className=\"tableSetting1\">\r\n                <tbody>\r\n                    <tr>\r\n                    <th>Event</th>\r\n                    <th>Email</th>\r\n                    <th>Fee</th>\r\n                    <th>Name</th>\r\n                    <th>Contact</th>\r\n                    <th>Delete</th>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            \r\n           <div>{data}</div>\r\n           <button className=\"btn-table changeBtn\"onClick={this.deleteall}>Delete All</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport Table from \"./Table/Table\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Table />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}